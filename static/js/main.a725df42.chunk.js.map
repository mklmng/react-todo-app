{"version":3,"sources":["components/layout/Header.js","components/layout/Form.js","components/todos/TodoResults.js","components/todos/TodoOverlay.js","components/todos/TodoItem.js","components/todos/TodoList.js","components/todos/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Form","props","onSubmit","this","handleSubmit","htmlFor","type","id","onChange","handleChange","value","text","TodoResults","pendingTasks","tasks","filter","task","complete","length","allTasks","TodoOverlay","editMode","editText","handleEditChanges","onClick","handleEditUpdates","TodoItem","map","index","key","handleComplete","handleEdit","handleDelete","TodoList","Todos","App","setState","editId","state","updatedList","splice","e","target","preventDefault","newTask","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a725df42.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n      return (\r\n        <header>\r\n          <h1 className=\"main-header\">List of tasks</h1>\r\n        </header>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Form extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    static propTypes = {\r\n        handleSubmit: PropTypes.func.isRequired,\r\n        handleChange: PropTypes.func.isRequired\r\n    }\r\n    \r\n    render() {\r\n      return (\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          <label htmlFor=\"new-task\">Task: </label>\r\n          <input \r\n            type=\"text\"\r\n            id=\"new-task\"\r\n            onChange={this.props.handleChange}\r\n            value={this.props.text}\r\n          />\r\n          <button>\r\n            Add task\r\n          </button>\r\n        </form>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Form;","import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass TodoResults extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n\r\n    static propTypes = {\r\n        tasks: PropTypes.array.isRequired\r\n    }\r\n    \r\n    render() {\r\n        const pendingTasks = this.props.tasks.filter(task => !task.complete).length;\r\n        const allTasks = this.props.tasks.length;\r\n\r\n        return (\r\n            <Fragment>\r\n                {allTasks > 0 \r\n                ? <div id=\"results\"><h2>You have {pendingTasks > 1 ? `${pendingTasks} pending tasks` : `${pendingTasks} pending task`}.</h2></div>\r\n                : <div id=\"results\"><h2>You don't have any pending tasks.</h2></div>\r\n                }  \r\n            </Fragment>\r\n        );\r\n    }\r\n  }\r\n\r\n  export default TodoResults;\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoOverlay extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n\r\n    static propTypes = {\r\n        editMode: PropTypes.bool.isRequired,\r\n        editText: PropTypes.string.isRequired,\r\n        editChanges: PropTypes.func.isRequired,\r\n        handleEditChanges: PropTypes.func.isRequired,\r\n        handleEditUpdates: PropTypes.func.isRequired\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Fragment>\r\n            {this.props.editMode && \r\n                <div id=\"edit-overlay\">\r\n                    <input className=\"edit-overlay__input\" type=\"text\" value={this.props.editText} onChange={this.props.handleEditChanges} />\r\n                    <button className=\"edit-overlay__cta\" onClick={()=> this.props.handleEditUpdates()}>Accept Changes</button> \r\n                </div>\r\n            }\r\n            </Fragment>\r\n        );\r\n    }\r\n  }\r\n\r\n  export default TodoOverlay;","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n    }\r\n\r\n    static propTypes = {\r\n        tasks: PropTypes.array.isRequired,\r\n        handleEdit: PropTypes.func.isRequired,\r\n        handleDelete: PropTypes.func.isRequired,\r\n        handleComplete: PropTypes.func.isRequired\r\n    }    \r\n    \r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                {this.props.tasks.map((task, index) => (\r\n                    <li className=\"task-item\" key={index}>\r\n                        <div className=\"task-item__content\">\r\n                            <span className={\"task-item__content__text \" + (task.complete ? \"task--completed\" : \"\")}>{task.text}</span>\r\n                        </div>\r\n                        <div className=\"task-item__controls\">\r\n                            {!task.complete &&\r\n                                <Fragment>\r\n                                    <span className=\"task-item__complete\" onClick={() => {this.props.handleComplete(index)}}>Complete</span>\r\n                                    <span className=\"task-item__edit\" onClick={() => {this.props.handleEdit(index, task.text)}}>Edit</span>\r\n                                </Fragment>\r\n                            }\r\n                            <span className=\"task-item__delete\" onClick={() => {this.props.handleDelete(index)}}>Delete</span>\r\n                        </div>\r\n                    </li>\r\n                    )\r\n                    )\r\n                }\r\n            </Fragment>\r\n        );\r\n    }\r\n  }\r\n\r\n  export default TodoItem;","import React, { Fragment } from 'react';\r\nimport TodoOverlay from './TodoOverlay';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoList extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    static propTypes = {\r\n        tasks: PropTypes.array.isRequired,\r\n        editMode: PropTypes.bool.isRequired,\r\n        editText: PropTypes.string.isRequired,\r\n        handleEdit: PropTypes.func.isRequired,\r\n        handleEditChanges: PropTypes.func.isRequired,\r\n        handleEditUpdates: PropTypes.func.isRequired,\r\n        handleDelete: PropTypes.func.isRequired,\r\n        handleComplete: PropTypes.func.isRequired\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <ol className=\"task-list\">\r\n                <TodoOverlay {...this.props} />\r\n                <TodoItem {...this.props} />\r\n            </ol>\r\n        );\r\n    }\r\n  }\r\n\r\n  export default TodoList;","import React, { Fragment } from 'react';\r\nimport TodoList from './TodoList';\r\nimport TodoOverlay from './TodoOverlay.js';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    static propTypes = {\r\n        tasks: PropTypes.array.isRequired,\r\n        editMode: PropTypes.bool.isRequired,\r\n        editText: PropTypes.string.isRequired,\r\n        handleEdit: PropTypes.func.isRequired,\r\n        handleEditChanges: PropTypes.func.isRequired,\r\n        handleEditUpdates: PropTypes.func.isRequired,\r\n        handleDelete: PropTypes.func.isRequired,\r\n        handleComplete: PropTypes.func.isRequired\r\n    }\r\n    \r\n    render() {\r\n        const allTasks = this.props.tasks.length;\r\n\r\n        return (\r\n            <Fragment>\r\n                {allTasks > 0 &&\r\n                    <TodoList {...this.props} />   \r\n                }\r\n            </Fragment>\r\n        );\r\n    }\r\n  }\r\n\r\n  export default Todos;\r\n","import React, { Fragment, Component } from 'react';\r\nimport './styles/App.css';\r\nimport Header from './components/layout/Header';\r\nimport Form from './components/layout/Form';\r\nimport TodoResults from './components/todos/TodoResults'\r\nimport Todos from './components/todos/Todos';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      tasks: [],\r\n      text: '',\r\n      editMode: false,\r\n      editText: '',\r\n      editId: 0\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const pendingTasks = this.state.tasks.filter(task => !task.complete).length;\r\n    const allTasks = this.state.tasks.length;\r\n\r\n    return (\r\n      <div id=\"todo-list\">\r\n        <Header />\r\n        <Form \r\n          handleSubmit={this.handleSubmit} \r\n          handleChange={this.handleChange} \r\n          text={this.state.text} />\r\n        <TodoResults tasks={this.state.tasks} />\r\n        <Todos \r\n          tasks={this.state.tasks}\r\n          editMode={this.state.editMode}\r\n          editText={this.state.editText}\r\n          handleEdit={this.handleEdit}\r\n          handleEditChanges={this.handleEditChanges}\r\n          handleEditUpdates={this.handleEditUpdates}\r\n          handleDelete={this.handleDelete}\r\n          handleComplete={this.handleComplete}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleEdit = (index, text) => {\r\n    this.setState({ editMode: true, editText: text, editId: index })\r\n  }\r\n\r\n  handleEditUpdates = () =>{\r\n    const id = this.state.editId;\r\n    const updatedList = [...this.state.tasks];\r\n    updatedList[id].text = this.state.editText;\r\n    this.setState({tasks: updatedList, editMode: false, editId: 0, editText: ''});\r\n  }\r\n\r\n  handleComplete = (index) => {\r\n    const updatedList = [...this.state.tasks];\r\n    updatedList[index].complete = true;\r\n    this.setState({tasks: updatedList})\r\n  }\r\n\r\n  handleDelete = (index) => {\r\n    const updatedList = [...this.state.tasks];\r\n    updatedList.splice(index,1);\r\n    this.setState({ tasks: updatedList})\r\n  }\r\n \r\n  handleChange = (e) => {\r\n    this.setState({ text: e.target.value });\r\n  }\r\n\r\n  handleEditChanges = (e) => {\r\n    this.setState({ editText: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.state.text.length === 0) {\r\n      return;\r\n    }\r\n    const newTask = {\r\n      text: this.state.text,\r\n      id: this.state.id + 1,\r\n      complete: false\r\n    };\r\n    \r\n    this.setState(state => ({\r\n      tasks: state.tasks.concat(newTask),\r\n      text: ''\r\n    }));\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}