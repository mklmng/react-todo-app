{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","App","props","handleComplete","index","updatedList","state","tasks","complete","setState","handleDelete","splice","handleChange","e","text","target","value","handleSubmit","preventDefault","length","newTask","id","done","concat","pendingTasks","this","filter","task","onSubmit","htmlFor","type","onChange","map","key","editMode","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAaiBA,G,6KARX,OACE,gCACE,wBAAIC,UAAU,eAAd,sB,GAJWC,IAAMC,YC2FZC,E,kDAzFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqDRC,eAAiB,SAACC,GAChB,IAAMC,EAAW,YAAO,EAAKC,MAAMC,OACnCF,EAAYD,GAAOI,UAAW,EAC9B,EAAKC,SAAS,CAACF,MAAOF,KAzDL,EA4DnBK,aAAe,SAACN,GACd,IAAMC,EAAW,YAAO,EAAKC,MAAMC,OACnCF,EAAYM,OAAOP,EAAM,GACzB,EAAKK,SAAS,CAAEF,MAAOF,KA/DN,EAkEnBO,aAAe,SAACC,GACd,EAAKJ,SAAS,CAAEK,KAAMD,EAAEE,OAAOC,SAnEd,EAsEnBC,aAAe,SAACJ,GAEd,GADAA,EAAEK,iBAC6B,IAA3B,EAAKZ,MAAMQ,KAAKK,OAApB,CAGA,IAAMC,EAAU,CACdN,KAAM,EAAKR,MAAMQ,KACjBO,GAAI,EAAKf,MAAMe,GAAK,EACpBC,MAAM,GAGR,EAAKb,UAAS,SAAAH,GAAK,MAAK,CACtBC,MAAOD,EAAMC,MAAMgB,OAAOH,GAC1BN,KAAM,SAjFR,EAAKR,MAAQ,CACXC,MAAO,GACPO,KAAM,IAJS,E,qDAQT,IAAD,OACDU,EAAeC,KAAKnB,MAAMC,MAAMmB,QAAO,SAAAC,GAAI,OAAKA,EAAKL,QAAMH,OAEjE,OACE,yBAAKE,GAAG,aACN,kBAAC,EAAD,MACA,0BAAMO,SAAUH,KAAKR,cACnB,2BAAOY,QAAQ,YAAf,UACA,2BACEC,KAAK,OACLT,GAAG,WACHU,SAAUN,KAAKb,aACfI,MAAOS,KAAKnB,MAAMQ,OAEpB,6CAIDU,EAAe,EACZ,yBAAKH,GAAG,WAAU,wCAAc,UAAsBG,EAAtBA,EAAe,EAAf,kCAAd,MAClB,yBAAKH,GAAG,WAAU,kEAEpB,wBAAIvB,UAAU,aACb2B,KAAKnB,MAAMC,MAAMyB,KAAI,SAACL,EAAMvB,GAAP,OAClB,wBAAIN,UAAU,YAAYmC,IAAK7B,IAE1B,EAAKE,MAAM4B,UACZ,kBAAC,WAAD,KACA,yBAAKpC,UAAU,sBACX,0BAAMA,UAAW,cAAgB6B,EAAKnB,SAAW,kBAAoB,KAAMmB,EAAKb,OAEpF,yBAAKhB,UAAU,uBACX,0BAAMA,UAAU,8BAA8BqC,QAAS,WAAO,EAAKzB,aAAaN,KAAhF,UACA,0BAAMN,UAAU,gCAAgCqC,QAAS,WAAO,EAAKhC,eAAeC,KAApF,wB,GA1CJJ,aCQEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2e5e0b71.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n      return (\r\n        <header>\r\n          <h1 className=\"main-header\">List of tasks</h1>\r\n        </header>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Header;","import React, { Fragment, Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      tasks: [],\n      text: ''\n    };\n  }\n\n  render() {\n    const pendingTasks = this.state.tasks.filter(task => !task.done).length;\n\n    return (\n      <div id=\"todo-list\">\n        <Header />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-task\">Task: </label>\n          <input \n            type=\"text\"\n            id=\"new-task\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <button>\n            Add task\n          </button>\n        </form>\n        {pendingTasks > 0 \n          ? <div id=\"results\"><h2>You have {pendingTasks > 1 ? `${pendingTasks} pending tasks` : `${pendingTasks} pending task`}.</h2></div>\n          : <div id=\"results\"><h2>You don't have any pending tasks.</h2></div>\n        }     \n          <ol className=\"task-list\">\n          {this.state.tasks.map((task, index) => (\n              <li className=\"task-item\" key={index}>\n                {\n                  !this.state.editMode && \n                  <Fragment>\n                  <div className=\"task-item__content\">\n                      <span className={\"task-item \" + (task.complete ? \"task--completed\" : \"\")}>{task.text}</span>\n                  </div>\n                  <div className=\"task-item__controls\">\n                      <span className=\"task-item task-item__delete\" onClick={() => {this.handleDelete(index)}}>Delete</span>\n                      <span className=\"task-item task-item__complete\" onClick={() => {this.handleComplete(index)}}>Complete</span>\n                  </div>\n                  </Fragment>\n                }\n              </li>\n              )\n            )\n          }\n          </ol>\n      </div>\n    );\n  }\n\n  handleComplete = (index) => {\n    const updatedList = [...this.state.tasks];\n    updatedList[index].complete = true;\n    this.setState({tasks: updatedList})\n  }\n\n  handleDelete = (index) => {\n    const updatedList = [...this.state.tasks];\n    updatedList.splice(index,1);\n    this.setState({ tasks: updatedList})\n  }\n \n  handleChange = (e) => {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    if (this.state.text.length === 0) {\n      return;\n    }\n    const newTask = {\n      text: this.state.text,\n      id: this.state.id + 1,\n      done: false\n    };\n    \n    this.setState(state => ({\n      tasks: state.tasks.concat(newTask),\n      text: ''\n    }));\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}